apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

// Java compatability
sourceCompatibility = 1.7
targetCompatibility = 1.7

group 'io.deepstream'
version '4.0.0'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10'
    }
}

sourceSets {
    main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

dependencies {
    implementation 'com.google.protobuf:protobuf-lite:3.0.0'

    compile 'com.google.protobuf:protobuf-java:3.0.0'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'org.java-websocket:Java-WebSocket:1.3.5'
    compile 'com.google.j2objc:j2objc-annotations:1.1'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.mockito:mockito-core:1.+"

    if (JavaVersion.current().isJava9Compatible()) {
        // Workaround for @javax.annotation.Generated
        // see: https://github.com/grpc/grpc-java/issues/3633
        compile 'javax.annotation:javax.annotation-api:1.3.1'
    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }
            task.plugins {
                javalite { }
            }
        }
    }
}